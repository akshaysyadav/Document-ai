version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kmrl_postgres_dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kmrl_db}
      POSTGRES_USER: ${POSTGRES_USER:-kmrl_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kmrl_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - kmrl_network_dev

  # Redis for RQ Queue
  redis:
    image: redis:7-alpine
    container_name: kmrl_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - kmrl_network_dev

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: kmrl_qdrant_dev
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data_dev:/qdrant/storage
    networks:
      - kmrl_network_dev

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: kmrl_minio_dev
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data_dev:/data
    networks:
      - kmrl_network_dev
    command: server /data --console-address ":9001"

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: kmrl_backend_dev
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-kmrl_user}:${POSTGRES_PASSWORD:-kmrl_password}@postgres:5432/${POSTGRES_DB:-kmrl_db}
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_URL=http://qdrant:6333
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - NLP_SERVICE_URL=http://nlp_service:8000
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
      - minio
      - nlp_service
    networks:
      - kmrl_network_dev
    volumes:
      - ./backend:/app

  # Optimized NLP Service with Flan-T5-Base (much faster)
  nlp_service:
    build:
      context: ./nlp_service
      dockerfile: Dockerfile
    container_name: kmrl_nlp_service_dev
    ports:
      - "8001:8000"
    environment:
      - TRANSFORMERS_CACHE=/app/.cache
      - HF_HOME=/app/.cache
      - TORCH_HOME=/app/.cache
    networks:
      - kmrl_network_dev
    volumes:
      - nlp_cache_dev:/app/.cache
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G  # Reduced from 4G since using smaller model
        reservations:
          memory: 1G  # Reduced from 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      start_period: 120s  # Reduced from 300s since model loads faster
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: kmrl_frontend_dev
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_APP_NAME=KMRL Document Intelligence MVP (Dev)
      - CHOKIDAR_USEPOLLING=1
      - WATCHPACK_POLLING=true
      - BROWSER=none
    depends_on:
      - backend
    networks:
      - kmrl_network_dev
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  qdrant_data_dev:
    driver: local
  minio_data_dev:
    driver: local
  nlp_cache_dev:
    driver: local

networks:
  kmrl_network_dev:
    driver: bridge