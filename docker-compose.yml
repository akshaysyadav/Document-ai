services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kmrl_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kmrl_db}
      POSTGRES_USER: ${POSTGRES_USER:-kmrl_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kmrl_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - kmrl_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kmrl_user} -d ${POSTGRES_DB:-kmrl_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for RQ Queue
  redis:
    image: redis:7-alpine
    container_name: kmrl_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kmrl_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: kmrl_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - kmrl_network
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    # Healthcheck removed due to minimal image lacking wget/curl; backend will wait for service_started

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: kmrl_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - kmrl_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: kmrl_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-kmrl_user}:${POSTGRES_PASSWORD:-kmrl_password}@postgres:5432/${POSTGRES_DB:-kmrl_db}
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_URL=http://qdrant:6333
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - NLP_SERVICE_URL=http://nlp_service:8000
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - WATCHFILES_FORCE_POLLING=true
      - UVICORN_RELOAD=true
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
      minio:
        condition: service_healthy
      nlp_service:
        condition: service_healthy
    networks:
      - kmrl_network
    volumes:
      - ./backend:/app
    restart: unless-stopped

  # RQ Worker (Optional, same backend image)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: kmrl_worker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-kmrl_user}:${POSTGRES_PASSWORD:-kmrl_password}@postgres:5432/${POSTGRES_DB:-kmrl_db}
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_URL=http://qdrant:6333
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - NLP_SERVICE_URL=http://nlp_service:8000
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
      minio:
        condition: service_healthy
      nlp_service:
        condition: service_healthy
    networks:
      - kmrl_network
    volumes:
      - ./backend:/app
    command: python run_worker.py
    restart: unless-stopped

  # NLP Service with Flan-T5-Base (pre-downloaded models)
  nlp_service:
    build:
      context: ./nlp_service
      dockerfile: Dockerfile
    container_name: kmrl_nlp_service
    ports:
      - "8001:8000"
    environment:
      - TRANSFORMERS_CACHE=/app/models
      - HF_HOME=/app/models
      - TORCH_HOME=/app/models
    networks:
      - kmrl_network
    volumes:
      # Optional: Map to host for model persistence across image rebuilds
      - nlp_models:/app/models
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G  # Slightly reduced since using smaller model
        reservations:
          memory: 1.5G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      start_period: 120s  # Reduced since models are pre-downloaded
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: kmrl_frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_APP_NAME=KMRL Document Intelligence MVP
      - CHOKIDAR_USEPOLLING=1
      - WATCHPACK_POLLING=true
      - BROWSER=none
    depends_on:
      - backend
    networks:
      - kmrl_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  minio_data:
    driver: local
  nlp_models:
    driver: local

networks:
  kmrl_network:
    driver: bridge